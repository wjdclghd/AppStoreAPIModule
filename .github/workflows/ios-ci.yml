name: iOS AppStoreAPIModule CI/CD Pipeline

on:
  #push:
  #  branches:
  #    - main
  #    - develop
  #    - 'release/release*'
  #    - 'hotfix/hotfix*'
  #    - 'feature/*'
  #pull_request:
  #  branches:
  #    - main
  #    - develop
  #    - 'release/release*'
  #    - 'hotfix/hotfix*'
  #    - 'feature/*'
  workflow_dispatch: {}

jobs:
  AppStoreAPIModule-unit-tests:
    name: AppStoreAPIModule Unit Tests
    runs-on: macos-15
    env:
      FASTLANE_SKIP_CONF_PROMPT: 1
      CI: true

    steps:
      - name: Checkout submodule repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install

      - name: Run AppStoreAPIModule Unit Tests
        run: |
          bundle exec fastlane unit_test

      - name: Upload Test Results (xcresult)
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: fastlane/test_output/**/*.xcresult

      - name: Upload JUnit Report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: fastlane/test_output/report.junit
          
      - name: Extract code coverage percentage
        id: coverage
        run: |
          brew install jq
          RESULT_PATH=$(find fastlane/test_output -type d -name "*.xcresult" | head -n 1)
          echo "📍 RESULT_PATH: $RESULT_PATH"

          if [ -d "$RESULT_PATH" ]; then
            xcrun xccov view --report --json "$RESULT_PATH" > coverage.json
            COVERAGE=$(jq '[.[].lineCoverage] | add / length * 100' coverage.json)
            echo "Code Coverage: $COVERAGE%"
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "$RESULT_PATH not found! Test might have failed."
            exit 1
          fi

      - name: Run Danger (non-blocking)
        continue-on-error: true
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}
        run: bundle exec danger
        
      #- name: Notify Slack (on failure only)
      #if: failure()
      #uses: 8398a7/action-slack@v3
      #with:
      #  status: ${{ job.status }}
      #  fields: repo,message,commit,author,action,eventName,ref,workflow
      #env:
      #  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
